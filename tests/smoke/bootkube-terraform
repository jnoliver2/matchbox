#!/usr/bin/env bash
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${DIR}/common"

main() {
  cleanup
  trap cleanup EXIT
  
  ./scripts/dev/get-kubectl
  ./scripts/devnet create
  
  # Add fake_rsa to ssh-agent
  eval `ssh-agent -s`
  chmod 600 ${DIR}/fake_rsa
  ssh-add ${DIR}/fake_rsa

  # Terraform apply to push resources to matchbox, don't wait for ssh
  pushd examples/terraform/bootkube-install
  terraform get
  # Terraform should properly shutdown with a SIGINT
  timeout 15 -s SIGINT --kill-after=20 /usr/local/bin/terraform apply -var-file ${DIR}/bootkube.tfvars || true
  popd
  
  # PXE boot QEMU/KVM VMs
  ./scripts/libvirt create

  # Terraform apply and loop until it copies assets and bootstrapping succeeds
  pushd examples/terraform/bootkube-install
  until terraform apply -var-file ${DIR}/bootkube.tfvars; do
    echo "Wait and retry terraform apply (copy-kubeconfig is expected to error loop)"
    sleep 10
  done
  popd

  until [[ "$(readyNodes)" == "3" ]]; do
    sleep 5
    echo "$(readyNodes) of 3 nodes are Ready..."
  done
  
  echo "Getting nodes..."
  k8s get nodes || true

  sleep 10
  echo "Getting pods..."
  k8s get pods --all-namespaces || true

  echo "bootkube cluster came up!"
  echo

  rm -rf assets
  cleanup
}

k8s() {
  ./bin/kubectl --kubeconfig=examples/terraform/bootkube-install/assets/auth/kubeconfig "$@"
}

readyNodes() {
  k8s get nodes -o template --template='{{range .items}}{{range .status.conditions}}{{if eq .type "Ready"}}{{.}}{{end}}{{end}}{{end}}' | grep -o -E True | wc -l
}

cleanup() {
  popd || true
  ./scripts/libvirt destroy || true
  ./scripts/devnet destroy || true
  rkt gc --grace-period=0
  pushd examples/terraform/bootkube-install
  rm -f *.tfstate*
  rm -rf assets
  popd
}

main $@
